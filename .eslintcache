[{"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\index.js":"1","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\App.js":"2","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\contexts\\Board.context.js":"3","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\pages\\Welcome.page.js":"4","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\pages\\Game.page.js":"5","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\contexts\\Game.context.js":"6","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\Board.component.js":"7","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\StartPanel.component.js":"8","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\Button.component.js":"9","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\Card.component.js":"10","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\Timer.component.js":"11","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\StatsBar.component.js":"12","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\styles\\global-variables.styles.js":"13","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\styles\\mixins.styles.js":"14","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\styles\\GlobalStyles.styles.js":"15"},{"size":220,"mtime":1611695039858,"results":"16","hashOfConfig":"17"},{"size":821,"mtime":1615653286999,"results":"18","hashOfConfig":"17"},{"size":1873,"mtime":1615112074855,"results":"19","hashOfConfig":"17"},{"size":512,"mtime":1615653392975,"results":"20","hashOfConfig":"17"},{"size":549,"mtime":1615649191415,"results":"21","hashOfConfig":"17"},{"size":2199,"mtime":1615109454109,"results":"22","hashOfConfig":"17"},{"size":1067,"mtime":1615151649080,"results":"23","hashOfConfig":"17"},{"size":1145,"mtime":1615653275667,"results":"24","hashOfConfig":"17"},{"size":946,"mtime":1615652962763,"results":"25","hashOfConfig":"17"},{"size":1592,"mtime":1615653735621,"results":"26","hashOfConfig":"17"},{"size":1060,"mtime":1615112057272,"results":"27","hashOfConfig":"17"},{"size":1711,"mtime":1615653443217,"results":"28","hashOfConfig":"17"},{"size":94,"mtime":1615652794832,"results":"29","hashOfConfig":"17"},{"size":371,"mtime":1615650509535,"results":"30","hashOfConfig":"17"},{"size":785,"mtime":1615652704513,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1ej7ft7",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\index.js",[],["65","66"],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\App.js",[],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\contexts\\Board.context.js",["67"],"import React, { useState, useEffect } from 'react';\r\n\r\nexport const BoardContext = React.createContext();\r\n\r\nconst BoardContextProvider = (props) => {\r\n\r\n    const [boardConfig] = useState(\r\n        [\r\n            {\r\n                label: 'small',\r\n                size: 16\r\n            },\r\n            {\r\n                label: 'large',\r\n                size: 36\r\n            }\r\n        ]\r\n    )\r\n\r\n    const [boardArray, setBoardArray] = useState([]);\r\n\r\n    const [boardSize, setBoardSize] = useState(16);\r\n\r\n    const GetBoardArray = (size) => {\r\n        let image;\r\n        let number;\r\n        let array = [];\r\n        setBoardArray([]);\r\n        for (let i = 0; i < size / 2; i++) {\r\n            number = RandomNumber(0, 200);\r\n            image = `https://picsum.photos/id/${number}/300/`;\r\n            array.push({number: number, img: image});\r\n        }\r\n       array = ShuffleBoard(array.concat(array));\r\n       setBoardArray(array.map((card, i) => {\r\n            return {...card, id: i};\r\n       }))\r\n       \r\n    }\r\n    \r\n    const RandomNumber = (min, max) => {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n\r\n    const ShuffleBoard = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    }\r\n    \r\n    useEffect(() => {\r\n        GetBoardArray(boardSize);\r\n        console.log(boardArray);\r\n    }, [boardSize]);\r\n\r\n    return (\r\n        <BoardContext.Provider value={{\r\n            boardArray,\r\n            boardSize,\r\n            setBoardSize,\r\n            boardConfig\r\n        }}>\r\n            {props.children}\r\n        </BoardContext.Provider>\r\n    );\r\n}\r\n\r\nexport default BoardContextProvider;\r\n\r\n","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\pages\\Welcome.page.js",[],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\pages\\Game.page.js",[],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\contexts\\Game.context.js",["68","69"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport { BoardContext } from './Board.context';\r\n\r\nexport const GameContext = React.createContext();\r\n\r\nconst GameContextProvider = (props) => {\r\n\r\n    const { boardSize } = useContext(BoardContext);\r\n\r\n    const [gameStart, setGameStart] = useState(false);\r\n    const [cardsArray, setCardsArray] = useState([]);\r\n    const [movesCounter, setMovesCounter] = useState(0);\r\n    const [player1Score, setPlayer1Score] = useState(0);\r\n\r\n    const addCard = (card) => {\r\n        setCardsArray(prevState => [...prevState, card]);\r\n    };\r\n\r\n    const statusChange = (status) => {\r\n        cardsArray.map(card => {\r\n            let selected = document.getElementById(`${card.id}`);\r\n            return selected.setAttribute('data-status', status);\r\n        })\r\n    }\r\n\r\n    const setSelected = () => {\r\n        statusChange('selected');\r\n    }\r\n\r\n    const setHidden = () => {\r\n        statusChange('hidden');\r\n    }\r\n\r\n    const setCollected = () => {\r\n        statusChange('collected');\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(cardsArray.length <= 2){\r\n            setSelected();\r\n        }\r\n        if(cardsArray.length === 2){\r\n            setTimeout(() => {\r\n                if(cardsArray[0].number === cardsArray[1].number){\r\n                    setCollected();\r\n                    setPlayer1Score(player1Score + 1);\r\n                }\r\n                else {\r\n                    setHidden();\r\n                }\r\n                setCardsArray([]);\r\n            }, 1000)\r\n            setMovesCounter(movesCounter + 1);\r\n        }\r\n    }, [cardsArray]);\r\n\r\n    useEffect(() => {\r\n        console.log(boardSize);\r\n        if(player1Score === boardSize / 2) {\r\n            setGameStart(false);\r\n            console.log('end game');\r\n        }\r\n        console.log(player1Score);\r\n    }, [player1Score])\r\n\r\n    return (\r\n        <GameContext.Provider value={{\r\n            addCard,\r\n            cardsArray,\r\n            movesCounter,\r\n            player1Score,\r\n            gameStart,\r\n            setGameStart\r\n        }}>\r\n            {props.children}\r\n        </GameContext.Provider>\r\n    )\r\n}\r\n\r\nexport default GameContextProvider;\r\n","C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\Board.component.js",[],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\StartPanel.component.js",[],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\Button.component.js",[],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\Card.component.js",[],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\Timer.component.js",[],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\components\\StatsBar.component.js",[],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\styles\\global-variables.styles.js",[],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\styles\\mixins.styles.js",[],"C:\\Users\\walcz\\Documents\\PRACE\\WEB\\memory-game\\src\\styles\\GlobalStyles.styles.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":58,"column":8,"nodeType":"76","endLine":58,"endColumn":19,"suggestions":"77"},{"ruleId":"74","severity":1,"message":"78","line":55,"column":8,"nodeType":"76","endLine":55,"endColumn":20,"suggestions":"79"},{"ruleId":"74","severity":1,"message":"80","line":64,"column":8,"nodeType":"76","endLine":64,"endColumn":22,"suggestions":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'GetBoardArray' and 'boardArray'. Either include them or remove the dependency array.","ArrayExpression",["84"],"React Hook useEffect has missing dependencies: 'movesCounter', 'player1Score', 'setCollected', 'setHidden', and 'setSelected'. Either include them or remove the dependency array. You can also do a functional update 'setMovesCounter(m => ...)' if you only need 'movesCounter' in the 'setMovesCounter' call.",["85"],"React Hook useEffect has a missing dependency: 'boardSize'. Either include it or remove the dependency array.",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [GetBoardArray, boardArray, boardSize]",{"range":"93","text":"94"},"Update the dependencies array to be: [cardsArray, movesCounter, player1Score, setCollected, setHidden, setSelected]",{"range":"95","text":"96"},"Update the dependencies array to be: [boardSize, player1Score]",{"range":"97","text":"98"},[1570,1581],"[GetBoardArray, boardArray, boardSize]",[1604,1616],"[cardsArray, movesCounter, player1Score, setCollected, setHidden, setSelected]",[1850,1864],"[boardSize, player1Score]"]